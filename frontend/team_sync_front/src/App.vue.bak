<template>
  <div id="app">
    <!-- Initial session creation/joining -->
    <Session v-if="!sessionId" @session-created="onSessionCreated" />

    <!-- ADMIN FLOW -->
    <template v-if="sessionId && isAdmin">
      <!-- Step 1: Admin settings (only shown before confirming settings) -->
      <div v-if="!settingsConfirmed" class="admin-flow">
        <h2>Admin Settings</h2>
        <AdminSettings @settings-saved="onSettingsSaved" />
      </div>

      <!-- Step 2: After settings are confirmed -->
      <div v-if="settingsConfirmed" class="admin-flow">
        <!-- Session code display -->
        <div class="session-info">
          <h3>Session Code: <span class="session-code">{{ sessionId }}</span></h3>
          <p>Share this code with participants to join this session</p>
          <div class="settings-summary">
            <p><strong>Anonymous Mode:</strong> {{ sessionSettings.anonymousMode ? 'Enabled' : 'Disabled' }}</p>
            <p><strong>Show Teams to Users:</strong> {{ sessionSettings.showTeamsToUsers ? 'Enabled' : 'Disabled' }}</p>
          </div>
        </div>

        <!-- Survey form -->
        <SurveyForm
          :sessionId="sessionId"
          :isAdmin="isAdmin"
          :anonymousMode="sessionSettings.anonymousMode"
          @surveys-updated="onSurveysUpdated"
        />
      </div>
    </template>

    <!-- PARTICIPANT FLOW -->
    <template v-if="sessionId && !isAdmin">
      <!-- Session code display -->
      <div class="session-info">
        <h3>Joined Session: <span class="session-code">{{ sessionId }}</span></h3>
      </div>

      <!-- Survey form -->
      <SurveyForm
        :sessionId="sessionId"
        :isAdmin="isAdmin"
        :anonymousMode="sessionSettings.anonymousMode"
        @surveys-updated="onSurveysUpdated"
      />
    </template>

    <!-- Team generation controls (admin only) -->
    <div v-if="sessionId && isAdmin && settingsConfirmed" style="margin-top:20px">
      <p>Responses: {{ surveys.length }}</p>
      <button @click="fetchTeams" :disabled="surveys.length < minResponses">
        Generate Teams
      </button>
    </div>

    <!-- Team list display -->
    <div v-if="teams.length && (isAdmin || sessionSettings.showTeamsToUsers)" class="teams-container">
      <h2>Generated Teams</h2>
      <div class="teams-list">
        <div v-for="(team, index) in teams" :key="index" class="team-card">
          <h3>Team {{ index + 1 }}</h3>
          <ul>
            <li v-for="member in team" :key="member">{{ member }}</li>
          </ul>
        </div>
      </div>
    </div>

    <!-- Team visualization (admin always, users only if enabled) -->
    <TeamGraph
      v-if="teams.length && (isAdmin || sessionSettings.showTeamsToUsers)"
      :teams="teams"
    />
  </div>
</template>

<script>
import Session from './components/Session.vue'
import SurveyForm from './components/SurveyForm.vue'
import TeamGraph from './components/TeamGraph.vue'
import AdminSettings from './components/AdminSettings.vue'
import axios from 'axios'

export default {
  name: 'App',
  components: { Session, SurveyForm, TeamGraph, AdminSettings },
  data() {
    return {
      sessionId: null,
      isAdmin: false,
      settingsConfirmed: false,
      sessionSettings: {
        anonymousMode: false,
        showTeamsToUsers: true
      },
      surveys: [],
      teams: [],
      minResponses: 1
    }
  },
  created() {
    console.log('App component created');
    // Check if we need to clear the admin flow flag (e.g., on page refresh)
    if (!this.sessionId) {
      localStorage.removeItem('isAdminFlow');
      console.log('Cleared admin flow flag on app creation');
    }
  },
  computed: {
    showSurveyForm() {
      // For admin: only show after settings are confirmed
      // For participants: show immediately
      const shouldShow = (this.sessionId && this.isAdmin && this.settingsConfirmed) ||
                         (this.sessionId && !this.isAdmin);
      console.log('Should show survey form:', shouldShow);
      return shouldShow;
    }
  },
  methods: {
    onSessionCreated({ id, admin }) {
      console.log(`Session created: id=${id}, admin=${admin}`);

      // Set session ID
      this.sessionId = id;

      // Set admin flag (ensure it's a boolean)
      this.isAdmin = Boolean(admin);

      // Check if we're in the admin flow
      const isAdminFlow = localStorage.getItem('isAdminFlow') === 'true';
      console.log('Is admin flow from localStorage:', isAdminFlow);

      // IMPORTANT: Always start with settings not confirmed for admin
      this.settingsConfirmed = false;

      console.log('Session created state:', {
        sessionId: this.sessionId,
        isAdmin: this.isAdmin,
        settingsConfirmed: this.settingsConfirmed,
        isAdminFlow
      });

      // If not admin, fetch settings and confirm them automatically
      if (!this.isAdmin) {
        this.fetchSessionSettings();
        this.settingsConfirmed = true;
        console.log('Participant settings confirmed');
      } else {
        // Force admin to confirm settings first
        this.settingsConfirmed = false;
        console.log('Admin needs to confirm settings first');
      }
    },

    onSettingsSaved(settings) {
      console.log('Settings saved:', settings);
      this.sessionSettings = { ...settings };
      console.log('Session settings after update:', this.sessionSettings);

      // Confirm settings and update state
      this.settingsConfirmed = true;

      // Clear the admin flow flag
      localStorage.removeItem('isAdminFlow');

      console.log('Admin settings confirmed, new state:', {
        sessionId: this.sessionId,
        isAdmin: this.isAdmin,
        settingsConfirmed: this.settingsConfirmed,
        isAdminFlow: localStorage.getItem('isAdminFlow')
      });

      // Save settings to the session in the backend
      this.saveSessionSettings();

      // Start polling surveys after settings are confirmed
      this.pollSurveys();
    },

    async saveSessionSettings() {
      try {
        // In a real implementation, you would save these settings to the backend
        // For now, we'll just log them
        console.log('Saving settings:', this.sessionSettings)

        // Example of how you might save settings to the backend:
        // await axios.post(`/api/session/${this.sessionId}/settings`, this.sessionSettings)
      } catch (error) {
        console.error('Error saving settings:', error)
      }
    },

    async fetchSessionSettings() {
      try {
        // In a real implementation, you would fetch settings from the backend
        // For now, we'll hardcode the settings for non-admin users
        console.log('Fetching settings for session:', this.sessionId);

        // IMPORTANT: For testing purposes, we're forcing anonymousMode to true for non-admin users
        this.sessionSettings = {
          anonymousMode: true,  // Force anonymous mode for testing
          showTeamsToUsers: true
        };

        console.log('Settings for non-admin user:', this.sessionSettings);

        // Example of how you might fetch settings from the backend:
        // const res = await axios.get(`/api/session/${this.sessionId}/settings`)
        // this.sessionSettings = res.data
      } catch (error) {
        console.error('Error fetching settings:', error);
      }
    },

    onSurveysUpdated(list) {
      this.surveys = list
    },

    async pollSurveys() {
      this.surveyInterval = setInterval(async () => {
        try {
          const res = await axios.get(`/api/session/${this.sessionId}/surveys`)
          this.surveys = res.data
        } catch (error) {
          console.error('Error polling surveys:', error)
        }
      }, 3000)
    },

    async fetchTeams() {
      try {
        console.log('Fetching teams for session:', this.sessionId);
        const res = await axios.post(`/api/session/${this.sessionId}/teams`);
        console.log('Teams response:', res.data);

        if (res.data && res.data.teams) {
          this.teams = res.data.teams;
          console.log('Teams set:', this.teams);

          // Validate teams data
          if (!Array.isArray(this.teams) || this.teams.length === 0) {
            console.warn('Teams data is empty or invalid');
          } else {
            console.log(`Generated ${this.teams.length} teams`);
          }
        } else {
          console.error('Invalid response format:', res.data);
        }

        clearInterval(this.surveyInterval);
      } catch (error) {
        console.error('Error fetching teams:', error);
        alert('Failed to generate teams. Please try again.');
      }
    }
  },
  beforeUnmount() {
    clearInterval(this.surveyInterval)
  }
}
</script>

<style>
#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  margin-top: 60px;
  max-width: 800px;
  margin-left: auto;
  margin-right: auto;
  padding: 0 20px;
}

.admin-flow {
  border: 1px solid #e9ecef;
  border-radius: 8px;
  padding: 20px;
  margin-bottom: 20px;
  background-color: #f8f9fa;
}

button {
  background-color: #4CAF50;
  border: none;
  color: white;
  padding: 10px 20px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  margin: 4px 2px;
  cursor: pointer;
  border-radius: 4px;
}

button:disabled {
  background-color: #cccccc;
  cursor: not-allowed;
}

input, select {
  padding: 8px;
  margin: 5px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.session-info {
  margin: 20px 0;
  padding: 15px;
  background-color: #f8f9fa;
  border-radius: 8px;
  border: 1px solid #e9ecef;
}

.session-code {
  font-size: 24px;
  font-weight: bold;
  color: #4CAF50;
  background-color: #e8f5e9;
  padding: 5px 10px;
  border-radius: 4px;
  border: 1px dashed #4CAF50;
}

.settings-summary {
  margin-top: 15px;
  padding: 10px;
  background-color: #f1f8e9;
  border-radius: 4px;
  text-align: left;
}

.settings-summary p {
  margin: 5px 0;
}

.teams-container {
  margin: 20px 0;
}

.teams-list {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 20px;
  margin-top: 20px;
}

.team-card {
  background-color: #f8f9fa;
  border: 1px solid #e9ecef;
  border-radius: 8px;
  padding: 15px;
  min-width: 200px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.team-card h3 {
  margin-top: 0;
  color: #4CAF50;
  border-bottom: 1px solid #e9ecef;
  padding-bottom: 10px;
}

.team-card ul {
  list-style-type: none;
  padding: 0;
  text-align: left;
}

.team-card li {
  padding: 5px 0;
  border-bottom: 1px dashed #e9ecef;
}

.teams-list {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 20px;
  margin-top: 20px;
}

.team-card {
  background-color: #f8f9fa;
  border: 1px solid #e9ecef;
  border-radius: 8px;
  padding: 15px;
  min-width: 200px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.team-card h3 {
  margin-top: 0;
  color: #4CAF50;
  border-bottom: 1px solid #e9ecef;
  padding-bottom: 10px;
}

.team-card ul {
  list-style-type: none;
  padding: 0;
  text-align: left;
}

.team-card li {
  padding: 5px 0;
  border-bottom: 1px dashed #e9ecef;
}
</style>
